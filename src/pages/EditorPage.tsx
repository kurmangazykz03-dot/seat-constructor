import { useState } from "react";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
import PropertiesPanel from "../components/editor/PropertiesPanel";
import SeatmapCanvas from "../components/editor/SeatMapCanvas";
import Toolbar from "../components/editor/ToolBar";
import TopBar from "../components/editor/TopBar";

// –•—É–∫ –¥–ª—è Undo/Redo –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
import { useHistory } from "../hooks/useHistory";

import { Row, Seat, Zone } from "../types/types";

const LS_KEY = "seatmap_schema";

// ------------------ –¢–∏–ø –¥–ª—è –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ö–µ–º—ã ------------------
export interface SeatmapState {
  hallName: string;
  backgroundImage?: string | null;
  zones: Zone[];
  rows: Row[];
  seats: Seat[];
  stage: {
    scale: number;
    x: number;
    y: number;
  };
}

// ------------------ –ù–∞—á–∞–ª—å–Ω–æ–µ (–ø—É—Å—Ç–æ–µ) —Å–æ—Å—Ç–æ—è–Ω–∏–µ ------------------
const INITIAL_STATE: SeatmapState = {
  hallName: "–ó–∞–ª 1",
  backgroundImage: null,
  zones: [],
  rows: [],
  seats: [],
  stage: {
    scale: 1,
    x: 0,
    y: 0,
  },
};

// ======================= –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –°–¢–†–ê–ù–ò–¶–´ =======================
function EditorPage() {
  // ------------------ –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–ù–û–í–ù–´–ú –°–û–°–¢–û–Ø–ù–ò–ï–ú (–î–ê–ù–ù–´–ú–ò) ------------------
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å—Ö–µ–º—ã –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π.
  // –í—Å–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–µ—Å—Ç–∞–º–∏, —Ä—è–¥–∞–º–∏ –∏ –∑–æ–Ω–∞–º–∏, —Ç–µ–ø–µ—Ä—å –∂–∏–≤–µ—Ç –∑–¥–µ—Å—å.
  const {
    state, // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (state.seats, state.rows, state.zones)
    setState, // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏)
    undo, // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã
    redo, // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    clear, // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å —Å–±—Ä–æ—Å–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    canUndo, // –§–ª–∞–≥, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    canRedo, // –§–ª–∞–≥, –º–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
  } = useHistory<SeatmapState>(INITIAL_STATE);

  // ------------------ –£–ü–†–ê–í–õ–ï–ù–ò–ï UI-–°–û–°–¢–û–Ø–ù–ò–ï–ú ------------------
  // –≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏—Å—Ç–æ—Ä–∏–∏ (undo/redo) –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON.
  // –û–Ω–∏ –æ—Ç–≤–µ—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.
  const [selectedIds, setSelectedIds] = useState<string[]>([]);
const [currentTool, setCurrentTool] = useState<
  "select" | "add-seat" | "add-row" | "add-zone" | "rotate"
>("select");



  // ======================= –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø TOPBAR =======================

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage –±—Ä–∞—É–∑–µ—Ä–∞
  const handleSave = () => {
    try {
      const json = exportToV2(state);
      localStorage.setItem(LS_KEY, JSON.stringify(json));
      alert("–°—Ö–µ–º–∞ (v2) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É.");
    }
  };

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ localStorage
  const handleLoad = () => {
    try {
      const raw = localStorage.getItem(LS_KEY);
      if (!raw) return alert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
      const data = JSON.parse(raw);
      const prevStage = state.stage; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ pan/zoom UI
      const imported = importFromV2(data);
      setState(() => ({ ...imported, stage: prevStage }));
      alert("–°—Ö–µ–º–∞ (v2) –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.");
    }
  };

  // üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏
  const handleClear = () => {
    if (
      window.confirm(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å."
      )
    ) {
      setState(() => ({
        hallName: "–ó–∞–ª 1",
        backgroundImage: null,
        zones: [],
        rows: [],
        seats: [],
        stage: { scale: 1, x: 0, y: 0 },
      }));
    }
  };
  function importFromV2(json: any): SeatmapState {
    const zones: Zone[] = (json.zones || []).map((z: any) => ({
      id: String(z.id),
      x: Number(z.x ?? 0),
      y: Number(z.y ?? 0),
      width: Number(z.width ?? 200),
      height: Number(z.height ?? 120),
      fill: String(z.color ?? z.fill ?? "#E5E7EB"),
      label: String(z.name ?? z.label ?? ""),
      color: z.color ?? undefined,
      rotation: Number(z.rotation ?? 0),
    }));

    const rows: Row[] = [];
    const seats: Seat[] = [];

    (json.zones || []).forEach((z: any) => {
      (z.rows || []).forEach((r: any, rIdx: number) => {
        const rowId = String(r.id);
        rows.push({
          id: rowId,
          zoneId: String(z.id),
          index: Number(rIdx),
          label: String(r.label ?? ""),
          x: Number(r.x ?? 0),
          y: Number(r.y ?? 0),
        });
        (r.seats || []).forEach((s: any, cIdx: number) => {
          seats.push({
            id: String(s.id),
            x: Number(s.x ?? 0),
            y: Number(s.y ?? 0),
            radius: Number(s.radius ?? 12),
            fill: String(s.fill ?? "#1f2937"),
            label: String(s.label ?? ""),
            zoneId: String(z.id),
            rowId: rowId,
            colIndex: Number(cIdx),
            status: (s.status as any) ?? "available",
            category: s.category ?? "standard",
          });
        });
      });
    });

    return {
      hallName: String(json.hallName ?? "–ó–∞–ª 1"),
      backgroundImage: json.backgroundImage ?? null,
      zones,
      rows,
      seats,
      // stage ‚Äî —ç—Ç–æ UI, –≤ JSON –µ–≥–æ –Ω–µ —Ö—Ä–∞–Ω–∏–º
      stage: { scale: 1, x: 0, y: 0 },
    };
  }

  function exportToV2(s: SeatmapState) {
    return {
      version: 2,
      hallName: s.hallName,
      backgroundImage: s.backgroundImage ?? null,
      zones: s.zones.map((zone) => ({
        id: zone.id,
        name: zone.label,
        color: zone.color ?? zone.fill,
        rotation: zone.rotation ?? 0,
        x: zone.x,
        y: zone.y,
        width: zone.width,
        height: zone.height,
        rows: s.rows
          .filter((row) => row.zoneId === zone.id)
          .map((row) => ({
            id: row.id,
            label: row.label,
            x: row.x,
            y: row.y,
            seats: s.seats
              .filter((seat) => seat.rowId === row.id)
              .sort((a, b) => (a.colIndex ?? 0) - (b.colIndex ?? 0))
              .map((seat) => ({
                id: seat.id,
                label: seat.label,
                x: seat.x,
                y: seat.y,
                fill: seat.fill, // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç
                radius: seat.radius, // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–¥–∏—É—Å
                status: seat.status ?? "available",
                category: seat.category ?? "standard",
              })),
          })),
      })),
    };
  }

  // ·Éî·É•·É°·Éû·Éù·É†·É¢·Éò –≠–∫—Å–ø–æ—Ä—Ç —Å—Ö–µ–º—ã –≤ JSON-—Ñ–∞–π–ª
  const handleExport = () => {
    const exportData = exportToV2(state);
    const jsonString = JSON.stringify(exportData, null, 2);
    const blob = new Blob([jsonString], { type: "application/json" });
    const url = URL.createObjectURL(blob);

    const link = document.createElement("a");
    link.href = url;
    link.download = "seatmap_v2.json";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleDelete = () => {
    if (selectedIds.length === 0) return;

    setState((prev) => ({
      ...prev,

      seats: prev.seats.filter((s) => !selectedIds.includes(s.id)),

      rows: prev.rows.filter((r) => !selectedIds.includes(r.id)),

      zones: prev.zones.filter((z) => !selectedIds.includes(z.id)),
    }));

    setSelectedIds([]);
  };


// –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—ë–≤ —Å–µ–∫—Ü–∏–∏ (–º–æ–∂–Ω–æ 0)
type AlignDirection = 'left' | 'center' | 'right';

// –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—ë–≤ —Å–µ–∫—Ü–∏–∏ (–º–æ–∂–Ω–æ 0)
const ALIGN_PADDING = 0;

const handleAlign = (direction: AlignDirection) => {
  if (selectedIds.length === 0) return;

  setState(prev => {
    // 1) –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–±–æ—Ä –∑–æ–Ω/—Ä—è–¥–æ–≤ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∫ –≤ seatmap.pro)
    const selectedZones = prev.zones.filter(z => selectedIds.includes(z.id));
    const selectedRows  = prev.rows.filter(r => selectedIds.includes(r.id));
    const selectedSeats = prev.seats.filter(s => selectedIds.includes(s.id));

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–æ–Ω–∞ ‚Äî –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –í–°–ï –µ—ë —Ä—è–¥—ã
    let rowsByZone = new Map<string, Row[]>();

    if (selectedZones.length > 0) {
      for (const z of selectedZones) {
        const rowsInZone = prev.rows.filter(r => r.zoneId === z.id);
        if (rowsInZone.length) rowsByZone.set(z.id, rowsInZone);
      }
    } else if (selectedRows.length > 0) {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä—è–¥—ã ‚Äî –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö (–ø–æ —Å–≤–æ–∏–º —Å–µ–∫—Ü–∏—è–º)
      for (const r of selectedRows) {
        const arr = rowsByZone.get(r.zoneId) ?? [];
        arr.push(r);
        rowsByZone.set(r.zoneId, arr);
      }
    } else if (selectedSeats.length > 0) {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ —Å–∏–¥–µ–Ω—å—è ‚Äî –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –†–Ø–î–´, –∫–æ—Ç–æ—Ä—ã–º –æ–Ω–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç
      // (–∫–∞–∫ –≤ seatmap.pro, –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ ‚Äî –æ–ø–µ—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è —Ä—è–¥–∞)
      const rowIds = new Set(selectedSeats.map(s => s.rowId).filter(Boolean) as string[]);
      for (const rowId of rowIds) {
        const r = prev.rows.find(rr => rr.id === rowId);
        if (!r) continue;
        const arr = rowsByZone.get(r.zoneId) ?? [];
        if (!arr.some(x => x.id === r.id)) arr.push(r);
        rowsByZone.set(r.zoneId, arr);
      }
    } else {
      // –ù–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ
      return prev;
    }

    if (rowsByZone.size === 0) return prev;

    // 2) –ì–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–µ –º–∞—Å—Å–∏–≤—ã
    const nextRows  = [...prev.rows];
    const nextSeats = [...prev.seats];

    // 3) –î–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ—ë —Ü–µ–ª–µ–≤—ã–µ —Ä—è–¥—ã
    for (const [zoneId, rowsInZone] of rowsByZone) {
      const zone = prev.zones.find(z => z.id === zoneId);
      if (!zone) continue;

      // –ì—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–µ–∫—Ü–∏–∏)
      const sectionLeft   = ALIGN_PADDING;
      const sectionRight  = zone.width - ALIGN_PADDING;
      const sectionCenter = zone.width / 2;

      for (const row of rowsInZone) {
        // –ë–µ—Ä—ë–º –í–°–ï —Å–∏–¥–µ–Ω—å—è —Ä—è–¥–∞
        const seatsInRow = prev.seats.filter(s => s.rowId === row.id);
        if (seatsInRow.length === 0) continue;

        // –®–∏—Ä–∏–Ω–∞ —Ä—è–¥–∞ –ø–æ —Å–∏–¥–µ–Ω—å—è–º (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ–∫—Ü–∏–∏)
        const minX = Math.min(...seatsInRow.map(s => s.x));
        const maxX = Math.max(...seatsInRow.map(s => s.x));
        const centerX = (minX + maxX) / 2;

        // –ö—É–¥–∞ ¬´–ø–æ—Å—Ç–∞–≤–∏—Ç—å¬ª —Ä—è–¥ –≤–Ω—É—Ç—Ä–∏ —Å–µ–∫—Ü–∏–∏
        let dx = 0;
        if (direction === 'left') {
          dx = sectionLeft - minX;
        } else if (direction === 'right') {
          dx = sectionRight - maxX;
        } else {
          // center: —Å–æ–≤–º–µ—â–∞–µ–º —Ü–µ–Ω—Ç—Ä —Ä—è–¥–∞ —Å —Ü–µ–Ω—Ç—Ä–æ–º —Å–µ–∫—Ü–∏–∏
          dx = sectionCenter - centerX;
        }

        if (dx === 0) continue;

        // –î–≤–∏–≥–∞–µ–º –∏–º–µ–Ω–Ω–æ –†–Ø–î (–∫–∞–∫ –±–ª–æ–∫), –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—É–ª—å—è –∫ –æ–¥–Ω–æ–º—É X:
        // ‚Äî —Å–¥–≤–∏–≥–∞–µ–º row.x
        const rowIdx = nextRows.findIndex(r => r.id === row.id);
        if (rowIdx >= 0) {
          nextRows[rowIdx] = { ...nextRows[rowIdx], x: nextRows[rowIdx].x + dx };
        }

        // ‚Äî —Å–¥–≤–∏–≥–∞–µ–º –≤—Å–µ –∫—Ä–µ—Å–ª–∞ —Ä—è–¥–∞ –Ω–∞ —Ç–æ—Ç –∂–µ dx, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é —Ä—è–¥–∞
        for (const s of seatsInRow) {
          const si = nextSeats.findIndex(ss => ss.id === s.id);
          if (si >= 0) nextSeats[si] = { ...nextSeats[si], x: nextSeats[si].x + dx };
        }
      }
    }

    return { ...prev, rows: nextRows, seats: nextSeats };
  });
};

  // ======================= –†–ï–ù–î–ï–† –ö–û–ú–ü–û–ù–ï–ù–¢–ê =======================
  return (
    <div className="flex flex-col w-full h-screen bg-gray-100">
      <TopBar
        onSave={handleSave}
        onLoad={handleLoad}
        onClear={handleClear}
        onExport={handleExport}
        onUndo={undo}
        onRedo={redo}
        canUndo={canUndo}
        canRedo={canRedo}
      />

      <div className="flex flex-1 overflow-hidden">
        <Toolbar
          currentTool={currentTool}
          setCurrentTool={setCurrentTool}
          onDelete={handleDelete}
          onAlign={handleAlign}
        />

        <main className="flex-1 bg-gray-50 p-4">
          <SeatmapCanvas
            // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—à–µ–≥–æ –µ–¥–∏–Ω–æ–≥–æ `state`
            seats={state.seats}
            rows={state.rows}
            zones={state.zones}
            // ‚ùó –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ: –ø–µ—Ä–µ–¥–∞–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–°–ï–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setState={setState}
            // UI-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
            selectedIds={selectedIds}
            setSelectedIds={setSelectedIds}
            currentTool={currentTool}
          />
        </main>

        <PropertiesPanel
          selectedIds={selectedIds}
          state={state} // –≤–µ—Å—å state —Å—Ä–∞–∑—É
          setState={setState} // –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ state
        />
      </div>
    </div>
  );
}

export default EditorPage;
